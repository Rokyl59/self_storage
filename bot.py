import os
import logging


from dotenv import load_dotenv
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, \
    InlineKeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, \
    CallbackQueryHandler, CallbackContext


from database import create_db, add_user, get_user, create_order, get_orders, \
    update_order_status, get_user_orders, set_admin, check_admin, \
    get_all_users, get_addresses, get_order_details, update_clicked_users
from bot_functions import allowed_items, prohibited_items, storage_conditions


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


def start(update: Update, context: CallbackContext) -> None:
    if context.args and context.args[0].startswith('ad'):
        handle_ad_click(update, context)
    if not get_user(update.effective_user.id):
        add_user(
            update.effective_user.id, update.effective_user.username, None
        )
    if get_user(update.effective_user.id)[3]:
        update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, —É–≤–∞–∂–∞–µ–º—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
            reply_markup=admin_menu_markup,
            parse_mode='Markdown'
        )
    else:
        text = '''
–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! üôã‚Äç‚ôÇÔ∏è

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞—à–∏—Ö –ª–∏—á–Ω—ã—Ö –≤–µ—â–µ–π. üì¶
–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –∏ —Ü–µ–Ω–Ω–æ–µ - —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å—É–≤–µ–Ω–∏—Ä—ã, –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. üóÇÔ∏è –í—Å–µ –≤–∞—à–∏ –≤–µ—â–∏ –±—É–¥—É—Ç –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ, –≤ –ø–æ–ª–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥ –≤–∞—à–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º. üîí
–ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ ¬´—è—â–∏–∫–∏¬ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞—à–∏—Ö –≤–µ—â–µ–π.

–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –≤–∞—à–µ –ª–∏—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üöÄ –£–≤–µ—Ä–µ–Ω, –≤—ã –ø–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤—É –æ—Ü–µ–Ω–∏—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. üòä
            '''
        update.message.reply_text(
            text,
            reply_markup=main_menu_markup,
            parse_mode='Markdown'
        )


def handle_main_menu(update: Update, context: CallbackContext) -> None:

    if update.message.text == 'üóÑÔ∏è –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –±–æ–∫—Å':
        addresses = get_addresses()
        inline_keyboard = [[InlineKeyboardButton(
            address[1],
            callback_data=f'address_{address[0]}')] for address in addresses]
        inline_keyboard.append([InlineKeyboardButton(
            "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤—ã–≤–æ–∑", callback_data='free_pickup')])
        inline_keyboard.append([InlineKeyboardButton(
            "–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='my_orders')])
        reply_markup = InlineKeyboardMarkup(inline_keyboard)
        update.message.reply_text(
            '–î–ª—è –∞—Ä–µ–Ω–¥—ã –±–æ–∫—Å–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –∞–¥—Ä–µ—Å–æ–≤ –Ω–∏–∂–µ. '
            '–ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤, —É–∫–∞–∑–∞–≤ —Å–≤–æ–π –∞–¥—Ä–µ—Å, '
            '–Ω–æ –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ `–ü—Ä–∞–≤–∏–ª–∞ –•—Ä–∞–Ω–µ–Ω–∏—è`\n\n'
            '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: `–ì–∞–±–∞—Ä–∏—Ç—ã –±—É–¥–µ—Ç –∏–∑–º–µ—Ä—è—Ç—å –¥–æ—Å—Ç–∞–≤—â–∏–∫.`',
            reply_markup=reply_markup,
            parse_mode='Markdown')

    elif update.message.text == 'üìú –ü—Ä–∞–≤–∏–ª–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è':
        inline_keyboard = [
            [InlineKeyboardButton("–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –≤–µ—â–∏",
                                  callback_data='allowed_items')],
            [InlineKeyboardButton("–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –≤–µ—â–∏",
                                  callback_data='prohibited_items')],
            [InlineKeyboardButton("–£—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è",
                                  callback_data='storage_conditions')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard)
        update.message.reply_text(
            '–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ \
             —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –º—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π. \
             –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∏–º–∏ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ \
             –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Å–∫–ª–∞–¥.', reply_markup=reply_markup)

    elif update.message.text == 'üìç –ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤':
        addresses = get_addresses()
        addresses_text = "\n".join([f"{index + 1}. {address[1]}"
                                    for index, address in enumerate(addresses)])
        update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ —Å–∫–ª–∞–¥–æ–≤:\n{addresses_text}")

    elif update.message.text == 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏':
        inline_keyboard = [
            [InlineKeyboardButton("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞", callback_data='email')],
            [InlineKeyboardButton("–¢–µ–ª–µ—Ñ–æ–Ω", callback_data='phone')],
            [InlineKeyboardButton("–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º",
                                  callback_data='telegram_message')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard)
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=reply_markup)

    elif (update.message.text == 'üîß –ê–¥–º–∏–Ω–∫–∞' and
          check_admin(update.effective_user.id)):
        inline_keyboard = [
            [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                                  callback_data='admin_show_user')],
            [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã",
                                  callback_data='admin_show_ticket')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard)
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=reply_markup)


def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()

    if query.data.startswith('address_'):
        address_id = query.data.split('_')[1]
        addresses = get_addresses()
        address = next((addr[1] for addr in addresses
                        if addr[0] == int(address_id)), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å")
        query.edit_message_text(
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞: {address}. "
                 "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ö—Ä–∞–Ω–∏—Ç—å, "
                 "–∏ —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–°–Ω–µ–≥–æ—Ö–æ–¥, –ª—ã–∂–∏ - 3 –º–µ—Å—è—Ü–∞')."
        )
        context.user_data['expected_message'] = 'rent_form'
        context.user_data['address'] = address

    elif query.data == 'free_pickup':
        query.edit_message_text(
            text=("–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Ü–µ–Ω–∞ - 1000 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü "
                  "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. "
                  "–î–æ—Å—Ç–∞–≤—â–∏–∫ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. "
                  "–ü—Ä–∏–º–µ—Ä: '`—É–ª. –¢—É—Ä–≥–µ–Ω–µ–≤–∞, –¥. 10, —Ç–µ–ª. +79876543210`'"),
            parse_mode='Markdown'
        )
        context.user_data['expected_message'] = 'free_pickup'

    elif query.data == 'my_orders':
        user_id = query.from_user.id
        orders = get_user_orders(user_id)
        if orders:
            orders_text = "\n".join([
                f"`–ó–∞–∫–∞–∑ {order[0]}:` {order[2]}, —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –¥–æ `{order[4]}` –Ω–∞ —Å–∫–ª–∞–¥–µ: `{order[6]}`\n"
                for order in orders])
            order_buttons = [
                [InlineKeyboardButton(f"–ó–∞–∫–∞–∑ {order[0]}", callback_data=f'order_{order[0]}')] for order in orders
            ]
            order_buttons.append([InlineKeyboardButton("–ó–∞–±—Ä–∞—Ç—å –≤—Å–µ", callback_data='take_all')])
            inline_keyboard = InlineKeyboardMarkup(order_buttons)
            query.edit_message_text(
                text=f"–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n{orders_text}",
                reply_markup=inline_keyboard,
                parse_mode='Markdown'
            )
        else:
            query.edit_message_text(
                text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."
            )

    elif query.data.startswith('order_'):
        order_id = int(query.data.split('_')[1])
        order_details = get_order_details(order_id)
        query.edit_message_text(
            text=f"–ó–∞–∫–∞–∑ `{order_id}`: {order_details[2]}, —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –¥–æ `{order_details[4]}` –Ω–∞ —Å–∫–ª–∞–¥–µ: `{order_details[6]}`\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=delivery_options_markup(),
            parse_mode='Markdown'
        )

    elif query.data == 'take_all':
        query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:",
            reply_markup=take_all_options_markup()
        )

    elif query.data == 'pickup_all':
        query.edit_message_text(
            text="–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑. –ó–∞–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã"
        )

    elif query.data == 'delivery_home_all':
        order_id = query.data.split('_')[1]
        context.user_data['order_id'] = order_id
        query.edit_message_text(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –¥–æ–º –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤. \n–ü—Ä–∏–º–µ—Ä: '`—É–ª. –¢—É—Ä–≥–µ–Ω–µ–≤–∞, –¥. 10, —Ç–µ–ª. +79876543210`'",
            parse_mode='Markdown'
        )
        context.user_data['expected_message'] = 'delivery_home_all'

    elif query.data.startswith('delivery_home'):
        order_id = query.data.split('_')[1]
        context.user_data['order_id'] = order_id
        query.edit_message_text(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –¥–æ–º. \n–ü—Ä–∏–º–µ—Ä: '`—É–ª. –¢—É—Ä–≥–µ–Ω–µ–≤–∞, –¥. 10, —Ç–µ–ª. +79876543210`'",
            parse_mode='Markdown'
        )
        context.user_data['expected_message'] = 'delivery_home'

    elif query.data == 'pickup':
        query.edit_message_text(
            text="–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑. –ó–∞–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑"
        )

    elif query.data == 'allowed_items':
        query.edit_message_text(text=allowed_items(), parse_mode='Markdown')

    elif query.data == 'prohibited_items':
        query.edit_message_text(text=prohibited_items(), parse_mode='Markdown')

    elif query.data == 'storage_conditions':
        query.edit_message_text(
            text=storage_conditions(), parse_mode='Markdown')

    elif query.data == 'email':
        query.edit_message_text(text="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: example@example.com")

    elif query.data == 'phone':
        query.edit_message_text(text="–¢–µ–ª–µ—Ñ–æ–Ω: +7 123 456 78 90")

    elif query.data == 'telegram_message':
        query.edit_message_text(text="–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: @example")

    elif query.data == 'admin_show_user':
        query.edit_message_text(text=f"{get_users()}")


def handle_text_messages(update: Update, context: CallbackContext) -> None:
    user = update.effective_user

    if 'expected_message' in context.user_data:

        if context.user_data['expected_message'] == 'rent_form':
            item_description, duration = update.message.text.split(' - ')
            start_date = datetime.now().strftime('%Y-%m-%d')
            end_date = (
                datetime.now() + timedelta(days=int(duration.split()[0]) * 30)
                ).strftime('%Y-%m-%d')
            address = context.user_data.get('address', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å')
            create_order(
                user.id, item_description, start_date, end_date, address)
            update.message.reply_text(
                '–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!',
                reply_markup=main_menu_markup
            )
            context.user_data.pop('expected_message')
            context.user_data.pop('address')

        elif context.user_data['expected_message'] == 'free_pickup':
            update.message.reply_text(
                '–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –¥–æ—Å—Ç–∞–≤—â–∏–∫',
                reply_markup=main_menu_markup
            )
            context.user_data.pop('expected_message')

        elif context.user_data.get('expected_message') == 'delivery_home':
            order_id = context.user_data.get('order_id')
            if order_id:
                update.message.reply_text(
                    '–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –Ω–∞ –¥–æ–º –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω.',
                    reply_markup=main_menu_markup
                )
                context.user_data.pop('expected_message')
                context.user_data.pop('order_id')

            else:
                update.message.reply_text(
                    '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'
                )

        elif context.user_data.get('expected_message') == 'delivery_home_all':
            order_id = context.user_data.get('order_id')
            if order_id:
                update.message.reply_text(
                    '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –∑–∞–∫–∞–∑—ã –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –Ω–∞ –¥–æ–º –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.',
                    reply_markup=main_menu_markup
                )
                context.user_data.pop('expected_message')
                context.user_data.pop('order_id')
            else:
                update.message.reply_text(
                    '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'
                )
    else:
        handle_main_menu(update, context)


def delivery_options_markup():
    inline_keyboard = [
        [InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –¥–æ–º", callback_data='delivery_home')],
        [InlineKeyboardButton("–°–∞–º–æ–≤—ã–≤–æ–∑", callback_data='pickup')]
    ]
    return InlineKeyboardMarkup(inline_keyboard)


def take_all_options_markup():
    inline_keyboard = [
        [InlineKeyboardButton(
            "–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –¥–æ–º",
            callback_data='delivery_home_all')],
        [InlineKeyboardButton("–°–∞–º–æ–≤—ã–≤–æ–∑", callback_data='pickup_all')]
    ]
    return InlineKeyboardMarkup(inline_keyboard)


def send_reminders(context: CallbackContext):
    orders = get_orders()
    for order in orders:
        user_id = order[1]
        end_date = datetime.strptime(order[4], '%Y-%m-%d')
        now = datetime.now()
        if now > end_date - timedelta(days=30) and now <= end_date - timedelta(days=29):
            context.bot.send_message(
                chat_id=user_id,
                text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à–∞ –∞—Ä–µ–Ω–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü.")
        elif now > end_date - timedelta(days=14) and now <= end_date - timedelta(days=13):
            context.bot.send_message(
                chat_id=user_id,
                text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à–∞ –∞—Ä–µ–Ω–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –¥–≤–µ –Ω–µ–¥–µ–ª–∏.")
        elif now > end_date - timedelta(days=7) and now <= end_date - timedelta(days=6):
            context.bot.send_message(
                chat_id=user_id,
                text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à–∞ –∞—Ä–µ–Ω–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é.")
        elif now > end_date - timedelta(days=3) and now <= end_date - timedelta(days=2):
            context.bot.send_message(
                chat_id=user_id,
                text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à–∞ –∞—Ä–µ–Ω–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ç—Ä–∏ –¥–Ω—è.")
        elif now > end_date:
            context.bot.send_message(
                chat_id=user_id,
                text="–í–∞—à–∞ –∞—Ä–µ–Ω–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –í–µ—â–∏ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –ø–æ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É –≤ —Ç–µ—á–µ–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤.")
            update_order_status(order[0], 'expired')


def send_qr_code(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    context.bot.send_document(chat_id=user, document=open('qr_code\\qr_code', rb))


def admin_command(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    if not get_user(user.id):
        update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    credentials = context.args[0] if context.args else ""
    if credentials == ADMIN_CREDENTIALS:
        set_admin(user.id)
        update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!",
                                  reply_markup=admin_menu_markup)
    else:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞.")


def handle_ad_click(update: Update, context: CallbackContext) -> None:
    user = update.effective_user.id
    click_date = datetime.now()
    update_clicked_users(user, click_date)


def get_users():
    users = get_all_users()

    if not users:
        return "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

    users_text = "\n\n".join([
        f"ID: {user[0]}\nUsername: {user[1]}\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {'–î–∞' if user[2] else '–ù–µ—Ç'}"
        for user in users
    ])

    return f"–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n{users_text}"


if __name__ == '__main__':
    main_menu_keyboard = [
        ['üóÑÔ∏è –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –±–æ–∫—Å', 'üìú –ü—Ä–∞–≤–∏–ª–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è'],
        ['üìç –ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤', 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏']
    ]

    admin_menu_keyboard = [
        ['üóÑÔ∏è –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –±–æ–∫—Å', 'üìú –ü—Ä–∞–≤–∏–ª–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è'],
        ['üìç –ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤', 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏'],
        ['üîß –ê–¥–º–∏–Ω–∫–∞']
    ]

    main_menu_markup = ReplyKeyboardMarkup(
        main_menu_keyboard,
        resize_keyboard=True)
    admin_menu_markup = ReplyKeyboardMarkup(
        admin_menu_keyboard,
        resize_keyboard=True)

    load_dotenv()
    create_db()
    TOKEN_TG = os.getenv('TOKEN_TG')
    ADMIN_CREDENTIALS = os.getenv('ADMIN_CREDENTIALS')
    updater = Updater(TOKEN_TG, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(
        CommandHandler("start", start)
    )
    dispatcher.add_handler(
        CommandHandler("admin", admin_command)
    )
    dispatcher.add_handler(
        MessageHandler(Filters.text & ~Filters.command, handle_text_messages)
    )
    dispatcher.add_handler(
        CallbackQueryHandler(button)
    )

    job_queue = updater.job_queue
    job_queue.run_repeating(send_reminders, interval=86400, first=0)

    updater.start_polling()
    updater.idle()
